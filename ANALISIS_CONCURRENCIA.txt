1. Acceso concurrente a los blueprints:

- Si múltiples hilos intentan agregar, modificar o consultar blueprints en simultáneo, puede ocurrir una condición de carrera si el acceso no está adecuadamente sincronizado.
- En particular, el método addNewBlueprint, donde se consulta si un blueprint ya existe y luego se agrega, no es atómico y puede llevar a inconsistencias si se intenta agregar el mismo blueprint desde diferentes hilos.
2. Métodos de consulta simultáneos:

- Métodos como getAllBlueprints, getBlueprintsByAuthor, y getBlueprint pueden enfrentar condiciones de carrera si varios hilos leen mientras otros modifican la colección de blueprints.

* Cuales son las respectivas regiones críticas?

Ajuste el código para suprimir las condiciones de carrera. Tengan en cuenta que simplemente sincronizar el acceso a las operaciones de persistencia/consulta DEGRADARÁ SIGNIFICATIVAMENTE el desempeño de API, por lo cual se deben buscar estrategias alternativas.

Escriba su análisis y la solución aplicada en el archivo ANALISIS_CONCURRENCIA.txt

a. InMemoryBlueprintPersistence: El almacenamiento en memoria de los blueprints es una región crítica, ya que no es Thread-safe. Si diferentes hilos intentan modificar esta colección simultáneamente, pueden sobrescribirse o provocar errores de lectura.

b. Operaciones de consulta y escritura simultáneas: Si un hilo está consultando los blueprints mientras otro los está modificando (agregando o eliminando), esto podría causar inconsistencias.

Solución aplicada
Para evitar condiciones de carrera sin degradar significativamente el rendimiento de la API, se ha implementado un enfoque basado en copias inmutables para las operaciones de consulta y un método synchronized en las operaciones de modificación. Aquí están los cambios realizados:

Uso de Copias Inmutables: En lugar de retornar referencias directas a la colección de blueprints, se crean copias inmutables de los datos cuando se realizan consultas. Esto garantiza que los datos no puedan ser modificados por hilos concurrentes.

Sincronización en Métodos de Modificación: El método saveBlueprint se ha marcado como synchronized para asegurar que solo un hilo pueda modificar la colección a la vez. Esto evita que múltiples hilos realicen cambios simultáneamente.

Implementación de Código:

    import java.util.concurrent.ConcurrentHashMap;
    private final ConcurrentHashMap<Tuple<String, String>, Blueprint> blueprints = new ConcurrentHashMap<>();

    @Override
        public Set<Blueprint> getAllBlueprints() {
            return Collections.unmodifiableSet(new HashSet<>(blueprints.values()));
        }

    @Override
        public Set<Blueprint> getBlueprintsByAuthor(String author) throws BlueprintNotFoundException {
            Set<Blueprint> authorBlueprints = new HashSet<>();

            for (Map.Entry<Tuple<String, String>, Blueprint> entry : blueprints.entrySet()) {
                if (entry.getKey().getElem1().equals(author)) {
                    authorBlueprints.add(entry.getValue());
                }
            }

            if (authorBlueprints.isEmpty()) {
                throw new BlueprintNotFoundException("No blueprints found for author: " + author);
            }

            return Collections.unmodifiableSet(authorBlueprints);
        }
